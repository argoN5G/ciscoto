### git : version control system that track documents updates
##
#
#** take a look in https://cli.github.com/manual/

# help manuals
	git help [cmd]
	git [cmd] --help
  # shows git version
	git --version

## global configuration of name & email
	git config --global user.name [name]
	git config --global user.email [email]
  # List config parameters 
	git config --list  

## iniate a track project directory for a repository
  # git create a .git directory within that project files
	cd [project_directory]
	git init	
  # to delete a track of a project just delete .git file
	cd [local_repo_directory]
	rm -rf .git

  ## create a .gitignore file to hide private files
	vim .gitignore # add private files here

# tracking files with git
  # show tracking status  
	git status 
  # add files to tracking
	git add [file_name]
	git add .gitignore
  # add all files to the tracking object
	git add -A 

# commit a change to the local repository
  # read commit from message -m
	git commit -m "!!comment"
  # read commit from a file
	git commint -F <file name>  
  	git commit --file=<file name>
  # sign a commit with bgp
	git commit -S -m "msg comment"
	# show signature
	git log --show-signature	

# reset a commitment & remove a file from staging area "tracking"
	git reset [file_name]
  # all file will be untracked
	git reset

# automatic push creation: origin main
	git push --set-upstream origin HEAD	

# pull & push to remote repository
  # 1 add branches to remote repo (origin or main) 
	git remote add origin https://github.com/profile/repo_name
	git push -u origin master 
	# [branch_name master or any other branch]
	git pull [repo] [branch]
	git pull/push	# after setting up the -u cmd in push
	# push to HEAD
	git push --set-upstream origin HEAD

# show commit logs & changes
  #git blame, revert, rebase, log, shortlog, show, diff 
	git log	[-p/--online]
	git diff
	git shortlog
	git show

# download a repository files (remote/local repositories)
	git clone [url] [path_tobe_save]
	git clone [local_repo_path] [path_tobe_saved]
	# example1: git clone https://github.com/profile_name/repo_name.git .
	# example2: git clone [/home/username/Desktop/local_repo] [/home/directory_name]

# About branches configd
  # show branches information
	git remote -v
	git branch -a
	git branch
  # create a branch
	git branch [branch_name]
  # change localtion to a branch
	git checkout [branch_name]
  # combine both commands
  	git checkout -b [new_branch]
  #! work on that branch & make changes wich not affect other bracnhs or remote repo
  # then you can merge to master branch & push changes to remote-repo
  # delete a branch from locale
	git branch -d [branch_name] 

  # delete branch from remote
	git push [repo_name] --delete [branch_name]

  # merge branchs
  	git branch --merge	# list merged branchs
	git checkout master	# change to master branch
	git pull [repo] [master=branch]
	git merge [second_branch_to_be_merged_with_master]
  # merge & sign (-S not needed if git.conf configured with gpgsign)
  	git merge --verify-sign -S [second_branch]


# Undo git changes & Mistakes
  # Undo changes before staging area
	# undo file changes checkout command
  	git status/diff
	git checkout file name
  
  # after stagin area & commit
  	git add [file]
	git commit -m "message mistake"
	git log
	git commit --amend -m "new fixed message"
  

 
##### ******** GCM & GPG Keys for HTTPS connections
#
  # using GCM Git-Credential-Manager with gpg key pair
	git clone https://github.com/GitCredentialManager/git-credential-manager.git
  # read the README.md file & install GCM 
 	cd git-credential-manager/src/linux
	./install-from-source.sh

  # generate gpg key pair
	gpg --gen-key

  # use gpg as GCM_CREDENTIAL_STORE
	git config --global credential.credentialStore gpg

  # use pass tool 
	apt install pass -y"

  # initiate pass with gpg-id
	pass init [gpg-id = username-id]

# using GCM with git cache strorage (! not prefered : gpg is better)

git config --global credential.credentialStore cache
git config --global credential.cacheOptions "--timeout 300"

#### *******
# using SSH
#
  # 1 generate ssh-key
	sh-keygen -t ed25519 -C "your_email@example.com"
  # or rsa
	ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

  # 2 add the SSH-key to the ssh-agent
	eval "$(ssh-agent -s)"   # run ssh-agent in background
	ssh-add ~/.ssh/id_ed25519

  # add ssh-pub-key to the git repo
	cat ~/.ssh/id_ed25519.pub
  # copy the pub-key & past it in profile-setting-ssh&gpg keys

#### Create a new repo from CLI
#1 navigate to local directory where you would like to create 
  #a local clone of your new project

#2 use github subcommand : gh repo create
	gh repo create
	# 3 follow the github prompt

# 4 => if you want to skip the prompt
	gh repo create [repo_name] [flags]
	gh repo create <repo_name> < --pubilc/private/internal > 
  # flags:
	-c, --clone # to clone it to local
  # create a repo from an existing local repo 
  	--sources [directory_path]
  	# by default remote-repo-name will be source directory name
  	--push	# to push any local commits to new repo
	--add-readme # add a README file to new repo
	-d	# description
	--disable-issues
	--disable-wiki
	-g, --gitignore <string>  # gitingnore template
	-h, --homepage <URL>	  # repo url
	--include-all-branches
	--internal		# make new repo internal
	-l, --license		# openSource license
	--private,--public
	-r, --remote <name>	# remote name for new repo
	-s, --source <dir_path> # use local repo as source for newrep
	-t, --team <name>	#organization team to garanted access
	-p, --template <repo>	# make newRepo based on template repo
	
# managing repositories from gh CLI
  # list all repositories
  	gh repo list	
  # create a remote repo from a local-repo
  # default remote name will be local directory repo name  
	gh repo create [repo_name] --source [local_repo] [--flags]
  # gh help
 	gh --help
	gh repo --help
	gh repo edit --help
  # rename a repo
  	gh repo rename [new_remote_repo_name]
  # delete a repo
  # authorization required
  	gh repo delete [repo-name] --yes
	gh auth refresh -s delete_repo

# forking an upstream repo to a new fork repo
# that shares visibility setting & code
# you need an organization membership to fork you own repo
  # puplic repo on the internet
  	gh repo fork [repo] --clone --remote 
	# see gh repo fork --help | for more flags
 
